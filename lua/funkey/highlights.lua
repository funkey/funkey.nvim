local p = require("funkey.palette")
local utils = require("funkey.utils")
local config = require("funkey.config")
local terminal = require("funkey.terminal")

local M = {}

local function load_highlights(highlights)
    for group_name, group_settings in pairs(highlights) do
        vim.api.nvim_set_hl(0, group_name, group_settings)
    end
end

local styles = vim.tbl_map(function(value)
    return setmetatable(value, {
        __add = function(a, b)
            return vim.tbl_extend("force", a, b)
        end,
    })
end, config.styles)

local transparent_bg = setmetatable({}, {
    __add = function(a)
        a.bg = config.transparent_background and p.none or a.bg
        return a
    end,
})

M.highlights = {
    -- User interface
    Normal = { fg = p.text, bg = p.background } + transparent_bg,
    NormalNC = { fg = p.text, bg = p.background } + transparent_bg,
    NormalSB = { fg = p.text, bg = p.background } + transparent_bg,
    NormalFloat = { fg = p.text, bg = p.background_1 } + transparent_bg,
    Terminal = { fg = p.text, bg = p.background } + transparent_bg,
    EndOfBuffer = { fg = p.background_2, bg = p.background } + transparent_bg,
    FoldColumn = { fg = p.text, bg = p.background } + transparent_bg,
    Folded = { fg = p.text, bg = p.background } + transparent_bg,
    SignColumn = { fg = p.text, bg = p.background } + transparent_bg,
    ToolbarLine = { fg = p.text },
    Cursor = { reverse = true },
    vCursor = { reverse = true },
    iCursor = { reverse = true },
    lCursor = { reverse = true },
    CursorIM = { reverse = true },
    CursorColumn = { bg = p.background_1 },
    CursorLine = {},
    ColorColumn = { bg = p.background_1 },
    CursorLineNr = { fg = p.text },
    LineNr = { fg = p.background_4 },
    Conceal = { fg = p.background_2, bg = p.background_1 } + transparent_bg,
    DiffAdd = { fg = p.none, bg = p.diff_add },
    DiffChange = { fg = p.none, bg = p.diff_change },
    DiffDelete = { fg = p.none, bg = p.diff_delete },
    DiffText = { fg = p.none, bg = p.diff_change },
    Directory = { fg = p.directory },
    ErrorMsg = { fg = p.error, bold = true, underline = true },
    WarningMsg = { fg = p.warning, bold = true },
    MoreMsg = { fg = p.highlight, bold = true },
    IncSearch = { fg = p.background, bg = p.highlight },
    Search = { fg = p.background, bg = p.highlight },
    CurSearch = { fg = p.background, bg = p.highlight },
    MatchParen = { fg = p.highlight, bold = true },
    NonText = { fg = p.background_4 },
    Whitespace = { fg = p.background_4 },
    SpecialKey = { fg = p.background_4 },
    Pmenu = { fg = p.text, bg = p.background },
    PmenuSbar = { fg = p.none, bg = p.background },
    PmenuSel = { fg = p.background, bg = p.highlight_secondary },
    PmenuThumb = { fg = p.none, bg = p.background_2 },
    WildMenu = { fg = p.background, bg = p.unassigned },
    Question = { fg = p.green },
    SpellBad = { underline = true, sp = p.error },
    SpellCap = { underline = true, sp = p.hint },
    SpellLocal = { underline = true, sp = p.hint },
    SpellRare = { underline = true, sp = p.hint },
    StatusLine = { fg = p.text, bg = p.background_2 },
    StatusLineTerm = { fg = p.text, bg = p.background_2 },
    StatusLineNC = { fg = p.text_darker, bg = p.background_1 },
    StatusLineTermNC = { fg = p.text_darker, bg = p.background_1 },
    TabLine = { fg = p.text, bg = p.background_4 },
    TabLineFill = { fg = p.text_darker, bg = p.background },
    TabLineSel = { fg = p.background, bg = p.highlight },
    WinSeparator = { fg = p.text_darker },
    VertSplit = { fg = p.text_darker },
    Visual = { bg = p.background_2 },
    VisualNOS = { fg = p.none, bg = p.background_2, underline = true },
    QuickFixLine = { underline = true, sp = p.highlight },
    Debug = { fg = p.debug },
    debugPC = { fg = p.background, bg = p.debug },
    debugBreakpoint = { fg = p.background, bg = p.debug },
    ToolbarButton = { fg = p.background, bg = p.button },
    FocusedSymbol = { bg = p.background_3 },
    FloatBorder = { fg = p.background_4 },
    FloatTitle = { fg = p.highlight },
    -- TODO: is there a way to disable highlighting?
    NeoTreeGitModified = { fg = p.highlight },

    -- syntax highlighting
    Variable = { fg = p.variable } + styles.variables,
    -- TODO: is there a way to also highlight parameters in the function body?
    Parameter = { fg = p.parameter } + styles.variables,
    Type = { fg = p.type } + styles.keywords,
    Structure = { fg = p.text } + styles.keywords,
    StorageClass = { fg = p.highlight } + styles.keywords,
    Identifier = { fg = p.text } + styles.identifiers,
    Constant = { fg = p.constant } + styles.variables,
    PreProc = { fg = p.keyword },
    PreCondit = { fg = p.keyword },
    Include = { fg = p.keyword },
    Namespace = { fg = p.keyword },
    Keyword = { fg = p.keyword } + styles.keywords,
    Define = { fg = p.keyword },
    Typedef = { fg = p.keyword },
    Exception = { fg = p.keyword },
    Conditional = { fg = p.keyword },
    Repeat = { fg = p.keyword },
    Statement = { fg = p.keyword },
    Macro = { fg = p.highlight },
    Error = { fg = p.error },
    Label = { fg = p.hint },
    Special = { fg = p.constant },
    SpecialChar = { fg = p.constant },
    Boolean = { fg = p.constant },
    String = { fg = p.constant },
    Character = { fg = p.constant },
    Number = { fg = p.constant },
    Float = { fg = p.constant },
    -- highlight function definition, but not calls
    Function = { fg = p.highlight } + styles.functions,
    FunctionCall = { fg = p.text } + styles.functions,
    Method = { fg = p.highlight } + styles.functions,
    MethodCall = { fg = p.text } + styles.functions,
    Property = { fg = p.text },
    Constructor = { fg = p.class } + styles.functions,
    Operator = { fg = p.operator },
    Title = { fg = p.highlight },
    Tag = { fg = p.highlight },
    Delimiter = { fg = p.text_darker },
    Comment = { fg = p.comment } + styles.comments,
    SpecialComment = { fg = p.background_4 } + styles.comments,
    Todo = { fg = p.highlight } + styles.comments,

    -- illuminated
    IlluminatedWordWrite = { bg = p.background_1, bold = true },
    IlluminatedWordRead = { bg = p.background_1 },
    IlluminatedWordText = { bg = p.background_1 },

    -- whichkey
    WhichKey = { fg = p.text_lighter },
    WhichKeyDesc = { fg = p.text },
    WhichKeyGroup = { fg = p.directory },
    WhichKeySeperator = { fg = p.unassigned },

    -- flash
    FlashBackdrop = { fg = p.background_4 },
    FlashLabel = { fg = p.background, bg = p.blue, bold = true },

    -- gitgutter
    GitGutterAdd = { fg = p.diff_add },
    GitGutterChange = { fg = p.diff_change },
    GitGutterDelete = { fg = p.diff_delete },

    -- diffview
    -- TODO: revisit that once we have diffvim installed
    -- DiffviewFilePanelTitle = { fg = p.blue, bold = true },
    -- DiffviewFilePanelCounter = { fg = p.purple, bold = true },
    -- DiffviewFilePanelFileName = { fg = p.text },
    -- DiffviewNormal = { link = "Normal" },
    -- DiffviewCursorLine = { link = "CursorLine" },
    -- DiffviewVertSplit = { link = "VertSplit" },
    -- DiffviewSignColumn = { link = "SignColumn" },
    -- DiffviewStatusLine = { link = "StatusLine" },
    -- DiffviewStatusLineNC = { link = "StatusLineNC" },
    -- DiffviewEndOfBuffer = { link = "EndOfBuffer" },
    -- DiffviewFilePanelRootPath = { fg = p.text_darker },
    -- DiffviewFilePanelPath = { fg = p.text_darker },
    -- DiffviewFilePanelInsertions = { fg = p.diff_add },
    -- DiffviewFilePanelDeletions = { fg = p.diff_delete },
    -- DiffviewStatusAdded = { fg = p.diff_add },
    -- DiffviewStatusUntracked = { fg = p.blue },
    -- DiffviewStatusModified = { fg = p.blue },
    -- DiffviewStatusRenamed = { fg = p.blue },
    -- DiffviewStatusCopied = { fg = p.blue },
    -- DiffviewStatusTypeChange = { fg = p.blue },
    -- DiffviewStatusUnmerged = { fg = p.blue },
    -- DiffviewStatusUnknown = { fg = p.diff_change },
    -- DiffviewStatusDeleted = { fg = p.diff_delete },
    -- DiffviewStatusBroken = { fg = p.diff_change },

    -- comments
    commentTSDanger = { fg = p.unassigned } + styles.comments,
    commentTSNote = { fg = p.highlight } + styles.comments,
    commentTSWarning = { fg = p.warning } + styles.comments,
    -- and special keys for todo-comments
    DiagnosticError = { fg = p.error, italic = true },
    DiagnosticWarn = { fg = p.warning, italic = true },
    DiagnosticInfo = { fg = p.info, italic = true },
    DiagnosticHint = { fg = p.hint, italic = true },

    -- treesitter
    ["@annotation"] = { link = "PreProc" },
    ["@attribute"] = { link = "PreProc" },
    ["@boolean"] = { link = "Boolean" },
    ["@character"] = { link = "Character" },
    ["@character.special"] = { link = "SpecialChar" },
    ["@comment"] = { link = "Comment" },
    ["@conditional"] = { link = "Conditional" },
    ["@constant"] = { link = "Constant" },
    ["@constant.builtin"] = { link = "Special" },
    ["@constant.macro"] = { link = "Define" },
    ["@constructor"] = { link = "Constructor" },
    ["@debug"] = { link = "Debug" },
    ["@define"] = { link = "Define" },
    ["@defaultLibrary"] = { link = "Special" },
    ["@error"] = { link = "Error" },
    ["@exception"] = { link = "Exception" },
    ["@field"] = { link = "Identifier" },
    ["@float"] = { link = "Float" },
    ["@function"] = { link = "Function" },
    ["@function.builtin"] = { link = "Special" },
    ["@function.call"] = { link = "FunctionCall" },
    ["@function.macro"] = { link = "Macro" },
    ["@function.method"] = { link = "Method" },
    ["@function.method.call"] = { link = "MethodCall" },
    ["@include"] = { link = "Include" },
    ["@keyword"] = { link = "Keyword" },
    ["@keyword.function"] = { link = "Keyword" },
    ["@keyword.operator"] = { link = "@operator" },
    ["@keyword.return"] = { link = "@keyword" },
    ["@label"] = { link = "Label" },
    ["@method"] = { link = "Method" },
    ["@method.call"] = { link = "MethodCall" },
    ["@namespace"] = { link = "Namespace" },
    ["@none"] = { bg = "NONE", fg = "NONE" },
    ["@number"] = { link = "Number" },
    ["@operator"] = { link = "Operator" },
    ["@parameter"] = { link = "Identifier" },
    ["@parameter.reference"] = { link = "@parameter" },
    ["@preproc"] = { link = "PreProc" },
    ["@property"] = { link = "Property" },
    ["@punctuation.bracket"] = { link = "Delimiter" },
    ["@punctuation.delimiter"] = { link = "Delimiter" },
    ["@punctuation.special"] = { link = "Delimiter" },
    ["@repeat"] = { link = "Repeat" },
    ["@storageclass"] = { link = "StorageClass" },
    ["@string"] = { link = "String" },
    ["@string.escape"] = { link = "SpecialChar" },
    ["@string.regex"] = { link = "String" },
    ["@string.special"] = { link = "SpecialChar" },
    ["@symbol"] = { link = "Identifier" },
    ["@tag"] = { link = "Label" },
    ["@tag.attribute"] = { link = "Property" },
    ["@tag.delimiter"] = { link = "Delimiter" },
    ["@text"] = { link = "@none" },
    ["@text.danger"] = { link = "WarningMsg" },
    ["@text.emphasis"] = { italic = true },
    ["@text.environment"] = { link = "Macro" },
    ["@text.environment.name"] = { link = "Type" },
    ["@text.literal"] = { link = "String" },
    ["@text.math"] = { link = "Special" },
    ["@text.note"] = { link = "SpecialComment" },
    ["@text.reference"] = { link = "Constant" },
    ["@text.strike"] = { strikethrough = true },
    ["@text.strong"] = { bold = true },
    ["@text.title"] = { link = "Title" },
    ["@text.todo"] = { link = "Todo" },
    ["@text.underline"] = { underline = true },
    ["@text.uri"] = { link = "Underlined" },
    ["@text.warning"] = { link = "Todo" },
    ["@todo"] = { link = "Todo" },
    ["@type"] = { link = "Type" },
    ["@type.builtin"] = { link = "Type" },
    ["@type.definition"] = { link = "Typedef" },
    ["@type.qualifier"] = { link = "Type" },
    ["@variable"] = { link = "Variable" },
    ["@variable.parameter"] = { link = "Parameter" },

    -- lsp
    LspCxxHlGroupEnumConstant = { link = "Constant" },
    LspCxxHlGroupMemberVariable = { link = "Variable" },
    LspCxxHlGroupNamespace = { link = "Namespace" },
    LspCxxHlSkippedRegion = { fg = p.text_darker },
    LspCxxHlSkippedRegionBeginEnd = { fg = p.text_darker },
    LspDiagnosticsDefaultError = { fg = p.error },
    LspDiagnosticsDefaultHint = { fg = p.hint },
    LspDiagnosticsDefaultInformation = { fg = p.info },
    LspDiagnosticsDefaultWarning = { fg = p.warning },
    LspDiagnosticsUnderlineError = { underline = true, sp = p.error },
    LspDiagnosticsUnderlineHint = { underline = true, sp = p.hint },
    LspDiagnosticsUnderlineInformation = { underline = true, sp = p.info },
    LspDiagnosticsUnderlineWarning = { underline = true, sp = p.warning },
    DiagnosticSignError = { fg = p.error },
    DiagnosticSignHint = { fg = p.hint },
    DiagnosticSignInfo = { fg = p.info },
    DiagnosticSignWarn = { fg = p.warning },
    LspReferenceRead = { bg = p.background_3 },
    LspReferenceWrite = { bg = p.background_3 },
    LspReferenceText = { bg = p.background_3 },
    LspInfoBorder = { fg = p.background_4 },

    -- lsp semantic tokens
    LspNamespace = { link = "Namespace" },
    LspType = { link = "Type" },
    LspClass = { link = "Type" },
    LspEnum = { link = "Constant" },
    LspInterface = { link = "Constant" },
    LspStruct = { link = "Constant" },
    LspTypeParameter = { link = "Type" },
    LspParameter = { link = "Parameter" },
    LspVariable = { link = "Variable" },
    LspProperty = { link = "Property" },
    LspEnumMember = { link = "Constant" },
    LspEvent = { link = "Constant" },
    LspFunction = { link = "Function" },
    LspMethod = { link = "Method" },
    LspMacro = { link = "Constant.macro" },
    LspKeyword = { link = "Keyword" },
    LspModifier = { link = "TSModifier" },
    LspComment = { link = "Comment" },
    LspString = { link = "String" },
    LspNumber = { link = "Number" },
    LspRegexp = { link = "String" },
    LspOperator = { link = "Operator" },
    LspDecorator = { link = "Identifier" },
    LspDeprecated = { link = "@text.strike" },
    ["@lsp.type.namespace"] = { link = "Namespace" },
    ["@lsp.type.type"] = { link = "Type" },
    ["@lsp.type.class"] = { link = "Type" },
    ["@lsp.type.enum"] = { link = "Type" },
    ["@lsp.type.interface"] = { link = "Type" },
    ["@lsp.type.struct"] = { link = "Structure" },
    ["@lsp.type.parameter"] = { link = "Parameter" },
    ["@lsp.type.variable"] = { link = "Variable" },
    ["@lsp.type.property"] = { link = "Property" },
    ["@lsp.type.enumMember"] = { link = "Constant" },
    ["@lsp.type.function"] = { link = "Function" },
    ["@lsp.type.method"] = { link = "Method" },
    ["@lsp.type.macro"] = { link = "Macro" },
    ["@lsp.type.decorator"] = { link = "Function" },

    -- cmp
    -- TODO: not sure we are using this?
    -- CmpItemKindDefault = { fg = p.blue },
    -- CmpItemAbbrMatch = { fg = p.blue },
    -- CmpItemAbbrMatchFuzzy = { fg = p.blue },
    -- CmpItemKindKeyword = { fg = p.text },
    -- CmpItemKindVariable = { link = "Variable" },
    -- CmpItemKindConstant = { fg = p.cyan },
    -- CmpItemKindReference = { fg = p.cyan },
    -- CmpItemKindValue = { fg = p.cyan },
    -- CmpItemKindFunction = { fg = p.purple },
    -- CmpItemKindMethod = { fg = p.purple },
    -- CmpItemKindConstructor = { fg = p.purple },
    -- CmpItemKindClass = { fg = p.yellow },
    -- CmpItemKindInterface = { fg = p.yellow },
    -- CmpItemKindStruct = { fg = p.yellow },
    -- CmpItemKindEvent = { fg = p.yellow },
    -- CmpItemKindEnum = { fg = p.yellow },
    -- CmpItemKindUnit = { fg = p.yellow },
    -- CmpItemKindModule = { fg = p.yellow },
    -- CmpItemKindProperty = { fg = p.green },
    -- CmpItemKindField = { fg = p.green },
    -- CmpItemKindTypeParameter = { fg = p.green },
    -- CmpItemKindEnumMember = { fg = p.green },
    -- CmpItemKindOperator = { fg = p.green },
    -- CmpItemKindSnippet = { fg = p.unassigned },

    -- coc
    -- TODO: not sure we are using this?
    -- CocErrorSign = { fg = p.error },
    -- CocHintSign = { fg = p.hint },
    -- CocInfoSign = { fg = p.info },
    -- CocWarningSign = { fg = p.warning },
    -- FgCocErrorFloatBgCocFloating = { fg = p.error, bg = p.background_2 },
    -- FgCocHintFloatBgCocFloating = { fg = p.hint, bg = p.background_2 },
    -- FgCocInfoFloatBgCocFloating = { fg = p.info, bg = p.background_2 },
    -- FgCocWarningFloatBgCocFloating = { fg = p.warning, bg = p.background_2 },

    -- gitsigns
    GitSignsAdd = { fg = p.diff_add },
    GitSignsAddLn = { fg = p.diff_add },
    GitSignsAddNr = { fg = p.diff_add },
    GitSignsChange = { fg = p.diff_change },
    GitSignsChangeLn = { fg = p.diff_change },
    GitSignsChangeNr = { fg = p.diff_change },
    GitSignsDelete = { fg = p.diff_delete },
    GitSignsDeleteLn = { fg = p.diff_delete },
    GitSignsDeleteNr = { fg = p.diff_delete },

    -- telescope
    TelescopeBorder = { link = "FloatBorder" },
    TelescopePreviewBorder = { fg = p.background_4 },
    TelescopePreviewTitle = { fg = p.title },
    TelescopePromptBorder = { fg = p.background_4 },
    TelescopePromptTitle = { fg = p.title },
    TelescopeResultsBorder = { fg = p.background_4 },
    TelescopeResultsTitle = { fg = p.title },

    -- markdown
    markdownBlockquote = { fg = p.text_darker },
    markdownBold = { fg = p.none, bold = true },
    markdownBoldDelimiter = { fg = p.text_darker },
    markdownCode = { fg = p.keyword },
    markdownCodeBlock = { fg = p.keyword },
    markdownCodeDelimiter = { fg = p.text_darker },
    markdownH1 = { fg = p.title, bold = true },
    markdownH2 = { fg = p.title, bold = true },
    markdownH3 = { fg = p.title, bold = true },
    markdownH4 = { fg = p.title, bold = true },
    markdownH5 = { fg = p.title, bold = true },
    markdownH6 = { fg = p.title, bold = true },
    markdownHeadingDelimiter = { fg = p.text_darker },
    markdownHeadingRule = { fg = p.text_darker },
    markdownId = { fg = p.highlight },
    markdownIdDeclaration = { fg = p.highlight },
    markdownItalic = { fg = p.none, italic = true },
    markdownItalicDelimiter = { fg = p.text_darker, italic = true },
    markdownLinkDelimiter = { fg = p.text_darker },
    markdownLinkText = { fg = p.keyword, underline = true },
    markdownLinkTextDelimiter = { fg = p.text_darker },
    markdownListMarker = { fg = p.keyword },
    markdownOrderedListMarker = { fg = p.keyword },
    markdownRule = { fg = p.keyword },
    markdownUrl = { fg = p.keyword, underline = true },
    markdownUrlDelimiter = { fg = p.text_darker },
    markdownUrlTitleDelimiter = { fg = p.text },
    ["@markup"] = { link = "@none" },
    ["@markup.heading"] = { fg = p.unassigned, bold = true },
    ["@markup.link.label"] = { fg = p.unassigned, underline = true },
    ["@markup.link.url"] = { fg = p.unassigned, underline = true },
    ["@markup.list"] = { fg = p.unassigned },
    ["@markup.list.checked"] = { fg = p.unassigned },
    ["@markup.list.unchecked"] = { fg = p.unassigned },
    ["@markup.strikethrough"] = { strikethrough = true },
    ["@markup.strong"] = { bold = true },
    ["@markup.italic"] = { italic = true },
    ["@markup.underline"] = { underline = true },
}

function M.setup()
    local highlights = type(config.custom_highlights) == "function"
        and config.custom_highlights(M.highlights, p)
        or config.custom_highlights
    load_highlights(vim.tbl_extend("force", M.highlights, highlights))
    if config.terminal_colors then
        terminal.setup()
    end
end

return M
